// Code generated. DO NOT EDIT.
package packets

import (
    "bytes"
    "encoding/binary"
)

{{- range $_, $packet := . }}

// {{ $packet.Name }} defines the fields for a packet of {{ $packet.SizeBytes }} bytes.
type {{ $packet.Name }} struct {
    {{- range $field := $packet.Fields }}
    {{ camelcase $field.Name }} {{ $field.Type }}
    {{- end }}
}

// PayloadType returns the LIFX message type for {{ $packet.Name }}.
func (p *{{ $packet.Name }}) PayloadType() uint16 {
    return uint16(PayloadType{{ $packet.Name }})
}

// Size is the total size of the message.
func (p *{{ $packet.Name }}) Size() int {
    return {{ $packet.SizeBytes }}
}

// MarshalBinary encodes the {{ $packet.Name }} packet into LIFX binary format.
func (p *{{ $packet.Name }}) MarshalBinary() ([]byte, error) {
{{- if eq (len $packet.Fields) 0 }}
    return nil, nil
{{- else }}
    var buf bytes.Buffer
    {{- range $field := $packet.Fields }}
    {{- if eq $field.Type "bool" }}
    if err := binary.Write(&buf, binary.LittleEndian, boolToUint8(p.{{ camelcase $field.Name }})); err != nil {
    {{- else }}
    if err := binary.Write(&buf, binary.LittleEndian, p.{{ camelcase $field.Name }}); err != nil {
    {{- end }}
        return nil, err
    }
    {{- end }}
    return buf.Bytes(), nil
{{- end }}
}

// UnmarshalBinary decodes the LIFX binary format into the {{ $packet.Name }} struct.
func (p *{{ $packet.Name }}) UnmarshalBinary(data []byte) error {
{{- if eq (len $packet.Fields) 0 }}
    return nil
{{- else }}
    buf := bytes.NewReader(data)
    {{- range $field := $packet.Fields }}
    {{- if eq $field.Type "bool" }}
    {
        var b uint8
        if err := binary.Read(buf, binary.LittleEndian, &b); err != nil {
            return err
        }
        p.{{ camelcase $field.Name }} = b != 0
    }
    {{- else }}
    if err := binary.Read(buf, binary.LittleEndian, &p.{{ camelcase $field.Name }}); err != nil {
        return err
    }
    {{- end }}
    {{- end }}
    return nil
{{- end }}
}

{{- end }}
