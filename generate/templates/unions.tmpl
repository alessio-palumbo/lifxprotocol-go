// Code generated. DO NOT EDIT.
package packets

import "unsafe"

{{- range $_, $union := . }}
// {{ $union.Name }} is a union that can hold one of several field variants in a fixed-size byte array.
type {{ $union.Name }} [{{ $union.SizeBytes }}]byte

{{- range $field := $union.Fields }}
  {{- if ne $field.Type "reserved" }}

  {{- if eq $field.Type (printf "[%d]byte" $union.SizeBytes) }}

  // {{ $field.Name }} returns the raw bytes of the union for the {{ $field.Name }} variant.
  func (u *{{ $union.Name }}) {{ $field.Name }}() []byte {
    return u[0:{{ $union.SizeBytes }}]
  }

  // Set{{ $field.Name }} sets the union using the provided raw bytes.
  func (u *{{ $union.Name }}) Set{{ $field.Name }}(v []byte) {
    if len(v) != {{ $union.SizeBytes }} {
      panic("invalid length for {{ $field.Name }}: expected {{ $union.SizeBytes }} bytes")
    }
    copy(u[0:{{ $union.SizeBytes }}], v)
  }

  {{- else }}

  // {{ $field.Name }} returns the union as a pointer to {{ $field.Type }}.
  func (u *{{ $union.Name }}) {{ $field.Name }}() *{{ $field.Type }} {
    return (*{{ $field.Type }})(unsafe.Pointer(u))
  }

  // Set{{ $field.Name }} sets the union using the provided *{{ $field.Type }}.
  func (u *{{ $union.Name }}) Set{{ $field.Name }}(v *{{ $field.Type }}) {
    if v == nil {
      var zero {{ $field.Type }}
      v = &zero
    }
    copy(u[0:{{ $union.SizeBytes }}], (*[{{ $union.SizeBytes }}]byte)(unsafe.Pointer(v))[:])
  }

  {{- end }}
  {{- end }}
{{- end }}

{{- end }}
